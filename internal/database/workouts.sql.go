// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workouts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (id, user_id, workout_date, workout_type, notes, created_at, updated_at)
VALUES (
	gen_random_uuid(),
	$1,
	NOW(),
	$2,
	$3,
	NOW(),
	NOW()
)
RETURNING id, user_id, workout_date, workout_type, notes, created_at, updated_at
`

type CreateWorkoutParams struct {
	UserID      uuid.UUID
	WorkoutType string
	Notes       sql.NullString
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.UserID, arg.WorkoutType, arg.Notes)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkoutDate,
		&i.WorkoutType,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkoutByID = `-- name: DeleteWorkoutByID :exec
DELETE FROM workouts
WHERE id = $1 AND user_id = $2
`

type DeleteWorkoutByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteWorkoutByID(ctx context.Context, arg DeleteWorkoutByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorkoutByID, arg.ID, arg.UserID)
	return err
}

const getWorkoutByID = `-- name: GetWorkoutByID :many
SELECT id, workout_date, workout_type, notes, created_at, updated_at
FROM workouts
WHERE id = $1 AND user_id = $2
`

type GetWorkoutByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

type GetWorkoutByIDRow struct {
	ID          uuid.UUID
	WorkoutDate time.Time
	WorkoutType string
	Notes       sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetWorkoutByID(ctx context.Context, arg GetWorkoutByIDParams) ([]GetWorkoutByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutByID, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkoutByIDRow
	for rows.Next() {
		var i GetWorkoutByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutDate,
			&i.WorkoutType,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkoutsByUser = `-- name: ListWorkoutsByUser :many
SELECT id, workout_date, workout_type, notes, created_at, updated_at
FROM workouts
WHERE user_id = $1
ORDER BY workout_date ASC
`

type ListWorkoutsByUserRow struct {
	ID          uuid.UUID
	WorkoutDate time.Time
	WorkoutType string
	Notes       sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) ListWorkoutsByUser(ctx context.Context, userID uuid.UUID) ([]ListWorkoutsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listWorkoutsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWorkoutsByUserRow
	for rows.Next() {
		var i ListWorkoutsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutDate,
			&i.WorkoutType,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkoutByID = `-- name: UpdateWorkoutByID :one
UPDATE workouts
SET workout_date = $3, workout_type = $4, notes = $5, updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, workout_date, workout_type, notes, created_at, updated_at
`

type UpdateWorkoutByIDParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	WorkoutDate time.Time
	WorkoutType string
	Notes       sql.NullString
}

type UpdateWorkoutByIDRow struct {
	ID          uuid.UUID
	WorkoutDate time.Time
	WorkoutType string
	Notes       sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpdateWorkoutByID(ctx context.Context, arg UpdateWorkoutByIDParams) (UpdateWorkoutByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateWorkoutByID,
		arg.ID,
		arg.UserID,
		arg.WorkoutDate,
		arg.WorkoutType,
		arg.Notes,
	)
	var i UpdateWorkoutByIDRow
	err := row.Scan(
		&i.ID,
		&i.WorkoutDate,
		&i.WorkoutType,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
