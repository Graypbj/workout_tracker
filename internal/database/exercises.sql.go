// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exercises.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (id, user_id, name, exercise_type, created_at, updated_at)
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	$3,
	NOW(),
	NOW()
)
RETURNING id, user_id, name, exercise_type, created_at, updated_at
`

type CreateExerciseParams struct {
	UserID       uuid.UUID
	Name         string
	ExerciseType string
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise, arg.UserID, arg.Name, arg.ExerciseType)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ExerciseType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE FROM exercises
WHERE id = $1 AND user_id = $2
`

type DeleteExerciseParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteExercise(ctx context.Context, arg DeleteExerciseParams) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, arg.ID, arg.UserID)
	return err
}

const getExercise = `-- name: GetExercise :many
SELECT id, name, exercise_type, created_at, updated_at
FROM exercises
WHERE user_id = $1
ORDER BY name asc
`

type GetExerciseRow struct {
	ID           uuid.UUID
	Name         string
	ExerciseType string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) GetExercise(ctx context.Context, userID uuid.UUID) ([]GetExerciseRow, error) {
	rows, err := q.db.QueryContext(ctx, getExercise, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExerciseRow
	for rows.Next() {
		var i GetExerciseRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ExerciseType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :one
UPDATE exercises
SET name = $3, exercise_type = $4, updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, name, exercise_type, created_at, updated_at
`

type UpdateExerciseParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	Name         string
	ExerciseType string
}

type UpdateExerciseRow struct {
	ID           uuid.UUID
	Name         string
	ExerciseType string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) (UpdateExerciseRow, error) {
	row := q.db.QueryRowContext(ctx, updateExercise,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.ExerciseType,
	)
	var i UpdateExerciseRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExerciseType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
