// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: strength_training_sessions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createStrengthTrainingSession = `-- name: CreateStrengthTrainingSession :one
INSERT INTO strength_training_sessions (id, user_id, workout_id, exercise_id, notes, created_at, updated_at)
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	$3,
	$4,
	NOW(),
	NOW()
)
RETURNING id, user_id, workout_id, exercise_id, notes, created_at, updated_at
`

type CreateStrengthTrainingSessionParams struct {
	UserID     uuid.UUID
	WorkoutID  uuid.UUID
	ExerciseID uuid.UUID
	Notes      sql.NullString
}

func (q *Queries) CreateStrengthTrainingSession(ctx context.Context, arg CreateStrengthTrainingSessionParams) (StrengthTrainingSession, error) {
	row := q.db.QueryRowContext(ctx, createStrengthTrainingSession,
		arg.UserID,
		arg.WorkoutID,
		arg.ExerciseID,
		arg.Notes,
	)
	var i StrengthTrainingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStrengthTrainingSessionByID = `-- name: DeleteStrengthTrainingSessionByID :exec
DELETE FROM strength_training_sessions
WHERE id = $1 AND user_id = $2
`

type DeleteStrengthTrainingSessionByIDParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteStrengthTrainingSessionByID(ctx context.Context, arg DeleteStrengthTrainingSessionByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteStrengthTrainingSessionByID, arg.ID, arg.UserID)
	return err
}

const listStrengthTrainingSessionsByWorkout = `-- name: ListStrengthTrainingSessionsByWorkout :many
SELECT id, workout_id, exercise_id, notes, created_at, updated_at
FROM strength_training_sessions
WHERE workout_id = $1 AND user_id = $2
`

type ListStrengthTrainingSessionsByWorkoutParams struct {
	WorkoutID uuid.UUID
	UserID    uuid.UUID
}

type ListStrengthTrainingSessionsByWorkoutRow struct {
	ID         uuid.UUID
	WorkoutID  uuid.UUID
	ExerciseID uuid.UUID
	Notes      sql.NullString
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) ListStrengthTrainingSessionsByWorkout(ctx context.Context, arg ListStrengthTrainingSessionsByWorkoutParams) ([]ListStrengthTrainingSessionsByWorkoutRow, error) {
	rows, err := q.db.QueryContext(ctx, listStrengthTrainingSessionsByWorkout, arg.WorkoutID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStrengthTrainingSessionsByWorkoutRow
	for rows.Next() {
		var i ListStrengthTrainingSessionsByWorkoutRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.ExerciseID,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStrengthTrainingSessionByID = `-- name: UpdateStrengthTrainingSessionByID :one
UPDATE strength_training_sessions
SET workout_id = $3, exercise_id = $4, notes = $5, updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, workout_id, exercise_id, notes, created_at, updated_at
`

type UpdateStrengthTrainingSessionByIDParams struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	WorkoutID  uuid.UUID
	ExerciseID uuid.UUID
	Notes      sql.NullString
}

type UpdateStrengthTrainingSessionByIDRow struct {
	ID         uuid.UUID
	WorkoutID  uuid.UUID
	ExerciseID uuid.UUID
	Notes      sql.NullString
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) UpdateStrengthTrainingSessionByID(ctx context.Context, arg UpdateStrengthTrainingSessionByIDParams) (UpdateStrengthTrainingSessionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateStrengthTrainingSessionByID,
		arg.ID,
		arg.UserID,
		arg.WorkoutID,
		arg.ExerciseID,
		arg.Notes,
	)
	var i UpdateStrengthTrainingSessionByIDRow
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.ExerciseID,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
