// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: strength_training_sets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStrengthTrainingSet = `-- name: CreateStrengthTrainingSet :one
INSERT INTO strength_training_sets (id, user_id, session_id, set_number, reps, weight, created_at, updated_at)
VALUES (
	gen_random_uuid,
	$1,
	$2,
	$3,
	$4,
	$5,
	NOW(),
	NOW()
)
RETURNING id, user_id, session_id, set_number, reps, weight, created_at, updated_at
`

type CreateStrengthTrainingSetParams struct {
	UserID    uuid.UUID
	SessionID uuid.UUID
	SetNumber int32
	Reps      int32
	Weight    string
}

func (q *Queries) CreateStrengthTrainingSet(ctx context.Context, arg CreateStrengthTrainingSetParams) (StrengthTrainingSet, error) {
	row := q.db.QueryRowContext(ctx, createStrengthTrainingSet,
		arg.UserID,
		arg.SessionID,
		arg.SetNumber,
		arg.Reps,
		arg.Weight,
	)
	var i StrengthTrainingSet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionID,
		&i.SetNumber,
		&i.Reps,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStrengthTrainingSet = `-- name: DeleteStrengthTrainingSet :exec
DELETE FROM strength_training_sets
WHERE id = $1 AND user_id = $2
`

type DeleteStrengthTrainingSetParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteStrengthTrainingSet(ctx context.Context, arg DeleteStrengthTrainingSetParams) error {
	_, err := q.db.ExecContext(ctx, deleteStrengthTrainingSet, arg.ID, arg.UserID)
	return err
}

const updateStrengthTrainingSet = `-- name: UpdateStrengthTrainingSet :one
UPDATE strength_training_sets
SET set_number = $3, reps = $4, weight = $5, updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, session_id, set_number, reps, weight, created_at, updated_at
`

type UpdateStrengthTrainingSetParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	SetNumber int32
	Reps      int32
	Weight    string
}

type UpdateStrengthTrainingSetRow struct {
	ID        uuid.UUID
	SessionID uuid.UUID
	SetNumber int32
	Reps      int32
	Weight    string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateStrengthTrainingSet(ctx context.Context, arg UpdateStrengthTrainingSetParams) (UpdateStrengthTrainingSetRow, error) {
	row := q.db.QueryRowContext(ctx, updateStrengthTrainingSet,
		arg.ID,
		arg.UserID,
		arg.SetNumber,
		arg.Reps,
		arg.Weight,
	)
	var i UpdateStrengthTrainingSetRow
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.SetNumber,
		&i.Reps,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
